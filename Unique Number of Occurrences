/* 
Given an array of integers arr, return true if the number of occurrences of each value in the array is unique, or false otherwise.
*/

/* Approach one */

class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        
        HashMap<Integer,Integer> hmp = new HashMap<>();
        for(int i=0; i<arr.length; i++) {
            int counter = 1;
            if(!hmp.containsKey(arr[i])) {
                
                hmp.put(arr[i], counter);
                
            } else {
                counter = hmp.get(arr[i]);
                counter++;
                hmp.put(arr[i], counter);
            }
        }
        
        Set<Integer> dupElements = new HashSet<>(hmp.values());
        if(dupElements.size() == hmp.values().size()) {
            return true;
        } else {
            return false;
        }
        
    }
}

/* Approach 2 */

class Solution {
    public boolean uniqueOccurrences(int[] arr) {
        
        Map<Integer,Integer> map = new HashMap<>();
        for(int i : arr)
            map.put(i, map.getOrDefault(i,0)+1);
        Set<Integer> set = new HashSet<>(map.values());
        return set.size() == map.size();
        
    }
}
